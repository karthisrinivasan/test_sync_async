/* auto-generated by logic synthesis */
import "in.act";

import syn::ring;
open syn::ring_2phase;
open syn;
import "expr.act";
open syn::expr;


defproc ring_tst <: tst()
+{
  ring_chan<8> R;
  ring_chan<8> L;
  }
{
  refine 
    +{
      ring_int<8> x;
      }
    {
      /* synthesis output */
      
/* start rsyn */
// Branched Ring ------------------

// Initial token buffer to initialize ring
// elem_c_itb block_1;

// elem_c_ppa block_2;
// connect_inchan_to_ctrl<8> conn_z_2;
// conn_z_2.ctrl = block_2.zero;
// conn_z_2.ch = L;

// // Data for action: L?x
// capture<5,6,8> latch_x_0;
// latch_x_0.go = block_2.data;
// latch_x_0.din = L.d;

// // Connecting block_1 & block_2
// block_2.m1 = block_1.p1;

// // Pipe block for action: R!x
// elem_c_paa_send block_3;
// connect_outchan_to_ctrl<8> conn_z_3;
// conn_z_3.ch = R;

// Data for action: R!x
// output bitwidth: 8 bits

// typical delay: 66.42ps
blk_1 inst_1;
// var_access<8> va_blk_1(latch_x_0.dout,inst_1.in_1);
// delay_line_chan<2> delay_expr_1;
// connect_exprblk_dout<8> conn_out_1(inst_1.out,conn_z_3.e);
// delay_expr_1.m1 = block_3.zero;
// delay_expr_1.p1 = conn_z_3.ctrl;

// // Connecting block_2 & block_3
// block_3.m1 = block_2.p1;

// // Connecting block_3 & block_1
// block_1.m1 = block_3.p1;


/* end rsyn */
      
      /* end refine */
    }
    /* end process */
  }
  

defproc test ()
{
  ring_tst x[1000];
}
