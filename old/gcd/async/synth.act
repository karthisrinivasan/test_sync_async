/* auto-generated by logic synthesis */
import "in.act";

import "syn/qdi/_all_.act";
import syn::ring;
open syn::ring_2phase;
open syn;
import "expr.act";
open syn::expr;

// Delay Line Parameters ----
Delay_Params[0]=0;
Delay_Params[1]=5;
Delay_Params[2]=10;
Delay_Params[3]=50;
Delay_Params[4]=10000;
// Delay Line Parameters ----


defproc ring_tst <: tst()
+{
  ring_chan<8> A;
  ring_chan<1> D;
  ring_chan<8> B;
  ring_chan<8> C;
  ring_chan<1> S;
  }
{
  refine +{
    ring_int<8> x;
    ring_int<8> xr;
    ring_int<1> s;
    ring_int<8> y;
    ring_int<1> d;
    ring_int<8> yr;
    }
  {
    /* synthesis output */
  
/* start rsyn */
// Branched Ring ------------------

// Initial token buffer to initialize ring
elem_c_itb block_1;
chan_access<8> latch_A_0(A);
chan_access<8> latch_B_0(B);
capture_init_new<6,6,8,0> latch_xr_0;
capture_init_new<6,6,8,0> latch_yr_0;

// Pipe block for action: S?s
elem_c_ppa block_2;
connect_inchan_to_ctrl<1> conn_z_2;
conn_z_2.ctrl = block_2.zero;
conn_z_2.ch = S;

// Data for action: S?s
capture<6,6,1> latch_s_0;
latch_s_0.go = block_2.data;
latch_s_0.din = S.d;
latch_s_0.tx.a = S.a;

// Connecting block_1 & block_2
block_2.m1 = block_1.p1;

// Pipe block for action: xr:=s=0x1 ? A : s=0x0&xr>yr ? int(xr-yr,8) : s=0x0&xr<=yr ? int(yr-xr,8) : 0x0
elem_c_paa block_3;

// Data for action: xr:=s=0x1 ? A : s=0x0&xr>yr ? int(xr-yr,8) : s=0x0&xr<=yr ? int(yr-xr,8) : 0x0
// output bitwidth: 8 bits

// typical delay: 1200.7ps
blk_0i1e10i0e23ga23mi8I10i0e23ka32mi8I1i0qqq_1_8_8_8_8 inst_1;
var_access<8> va_blk_1(latch_yr_0.dout,inst_1.in_3);
var_access<8> va_blk_2(latch_xr_0.dout,inst_1.in_2);
var_access<8> va_blk_3(latch_A_0.dout,inst_1.in_1);
var_access<1> va_blk_4(latch_s_0.dout,inst_1.in_0);
delay_line_chan<30> delay_expr_1;
capture_dummy<6,6,8> latch_xr_1;
connect_exprblk_assign<8> conn_out_1(inst_1.out,latch_xr_1.din,latch_xr_1.tx);
delay_expr_1.m1 = block_3.zero;
delay_expr_1.p1 = latch_xr_1.go;

// Connecting block_2 & block_3
block_3.m1 = block_2.p1;

// Pipe block for action: yr:=s=0x1 ? B : s=0x0&xr>yr ? int(xr-yr,8) : s=0x0&xr<=yr ? int(yr-xr,8) : 0x0
elem_c_paa block_4;

// Data for action: yr:=s=0x1 ? B : s=0x0&xr>yr ? int(xr-yr,8) : s=0x0&xr<=yr ? int(yr-xr,8) : 0x0
// output bitwidth: 8 bits

// typical delay: 1200.7ps
blk_0i1e10i0e23ga23mi8I10i0e23ka32mi8I1i0qqq_1_8_8_8_8 inst_2;
var_access<8> va_blk_5(latch_yr_0.dout,inst_2.in_3);
var_access<8> va_blk_6(latch_xr_1.dout,inst_2.in_2);
var_access<8> va_blk_7(latch_B_0.dout,inst_2.in_1);
var_access<1> va_blk_8(latch_s_0.dout,inst_2.in_0);
delay_line_chan<30> delay_expr_2;
capture_dummy<6,6,8> latch_yr_1;
connect_exprblk_assign<8> conn_out_2(inst_2.out,latch_yr_1.din,latch_yr_1.tx);
delay_expr_2.m1 = block_4.zero;
delay_expr_2.p1 = latch_yr_1.go;

// Connecting block_3 & block_4
block_4.m1 = block_3.p1;

// Pipe block for action: A?
elem_c_ppa block_5;
connect_inchan_to_ctrl<8> conn_z_5;
conn_z_5.ctrl = block_5.zero;
conn_z_5.ch = A;
block_5.data.r = block_5.data.a;

// Connecting block_4 & block_5
block_5.m1 = block_4.p1;

// Pipe block for action: B?
elem_c_ppa block_6;
connect_inchan_to_ctrl<8> conn_z_6;
conn_z_6.ctrl = block_6.zero;
conn_z_6.ch = B;
block_6.data.r = block_6.data.a;

// Connecting block_5 & block_6
block_6.m1 = block_5.p1;

// Pipe block for action: d:=int(xr=yr)
elem_c_paa block_7;

// Data for action: d:=int(xr=yr)
// output bitwidth: 1 bits

// typical delay: 333.65ps
blk_01eI0_8_8_1 inst_3;
var_access<8> va_blk_9(latch_yr_1.dout,inst_3.in_1);
var_access<8> va_blk_10(latch_xr_1.dout,inst_3.in_0);
delay_line_chan<9> delay_expr_3;
capture_dummy<6,6,1> latch_d_0;
connect_exprblk_assign<1> conn_out_3(inst_3.out,latch_d_0.din,latch_d_0.tx);
delay_expr_3.m1 = block_7.zero;
delay_expr_3.p1 = latch_d_0.go;

// Connecting block_6 & block_7
block_7.m1 = block_6.p1;
// 2-way parallel split for actions: C!d=0x1 ? xr : 0x0,D!d
// 2-way parallel merge
parallel_split<2> block_8;
parallel_merge<2> block_9;

// Connecting block_7 & block_8
block_8.m1 = block_7.p1;
gp_connect block_10;

// Connecting parallel split block_8 (output) & pipe block_10
block_8.co[0] = block_10.m1;

// Pipe block for action: C!d=0x1 ? xr : 0x0
elem_c_paa_send block_11;
connect_outchan_to_ctrl<8> conn_z_11;
conn_z_11.ch = C;

// Data for action: C!d=0x1 ? xr : 0x0
// output bitwidth: 8 bits

// typical delay: 60.15ps
blk_0i1e1i0q_1_8_8 inst_4;
var_access<8> va_blk_11(latch_xr_1.dout,inst_4.in_1);
var_access<1> va_blk_12(latch_d_0.dout,inst_4.in_0);
delay_line_chan<3> delay_expr_4;
connect_exprblk_dout<8> conn_out_4(inst_4.out,conn_z_11.e);
delay_expr_4.m1 = block_11.zero;
delay_expr_4.p1 = conn_z_11.ctrl;

// Connecting block_10 & block_11
block_11.m1 = block_10.p1;

// Connecting parallel merge block_9 (input) & pipe block_11
block_9.ci[0] = block_11.p1;
gp_connect block_12;

// Connecting parallel split block_8 (output) & pipe block_12
block_8.co[1] = block_12.m1;

// Pipe block for action: D!d
elem_c_paa_send block_13;
connect_outchan_to_ctrl<1> conn_z_13;
conn_z_13.ch = D;

// Data for action: D!d
// output bitwidth: 1 bits

// typical delay: 66.42ps
blk_0_1_1 inst_5;
var_access<1> va_blk_13(latch_d_0.dout,inst_5.in_0);
delay_line_chan<3> delay_expr_5;
connect_exprblk_dout<1> conn_out_5(inst_5.out,conn_z_13.e);
delay_expr_5.m1 = block_13.zero;
delay_expr_5.p1 = conn_z_13.ctrl;

// Connecting block_12 & block_13
block_13.m1 = block_12.p1;

// Connecting parallel merge block_9 (input) & pipe block_13
block_9.ci[1] = block_13.p1;

// Pipe block for lcd. transmission.
elem_c_paa_c<2> block_14;

// Connecting block_9 & block_14
block_14.m1 = block_9.p1;
var_access<8> va_blk_14(latch_xr_1.dout,);
connect_exprblk_assign<8> conn_out__lcd_14(va_blk_14.dout,latch_xr_0.din,latch_xr_0.tx);
block_14.zero[0] = latch_xr_0.go;
var_access<8> va_blk_15(latch_yr_1.dout,);
connect_exprblk_assign<8> conn_out__lcd_15(va_blk_15.dout,latch_yr_0.din,latch_yr_0.tx);
block_14.zero[1] = latch_yr_0.go;


// Pipe block for lcd. transmission.
elem_c_paa_c<2> block_15;

// Connecting block_14 & block_15
block_15.m1 = block_14.p1;
block_15.zero[0] = latch_xr_0.go2;
block_15.zero[1] = latch_yr_0.go2;


// Connecting block_15 & block_1
block_1.m1 = block_15.p1;


/* end rsyn */
  
  /* end refine */
  }
  /* end process */
}
